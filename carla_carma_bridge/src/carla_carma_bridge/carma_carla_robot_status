#!/usr/bin/env python
# Copyright (C) 2021 LEIDOS.
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may not
# use this file except in compliance with the License. You may obtain a copy of
# the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations under
# the License.


"""
Publish to CARMA :cav_msgs::RobotEnabled
    Topic: /hardware_interface/controller/robot_status

Subscribe from CARMA :cav_msgs::GuidanceState
    Topic: /guidance/state
"""
import rospy
from cav_msgs.msg import RobotEnabled, GuidanceState

robot_status_pub = rospy.Publisher('/hardware_interface/controller/robot_status', RobotEnabled, queue_size=10)
robot_status_msg = RobotEnabled()

def guidance_state_callback(guidance_state_msg):
    """
    callback for guidance state subscribing from CARMA
    guidance_state_msg type:
        cav_msgs::GuidanceState
    """
    global robot_status_msg

    if guidance_state_msg.state == GuidanceState.ENGAGED or guidance_state_msg.state == GuidanceState.ACTIVE:
        robot_status_msg.robot_active = True
    else:
        robot_status_msg.robot_active = False

def robot_status():
    """
    main loop
    """
    rospy.init_node('carma_carla_robot_status', anonymous=True)
    pub_rate = rospy.get_param('~robot_status_pub_rate', 10)
    rate = rospy.Rate(pub_rate)

    rospy.Subscriber('/guidance/state', GuidanceState, guidance_state_callback, queue_size=1)
    robot_status_msg.robot_enabled = True

    while not rospy.is_shutdown():
        robot_status_pub.publish(robot_status_msg)
        rate.sleep()

if __name__ == '__main__':
    print("carma_carla_robot_status")
    robot_status()
