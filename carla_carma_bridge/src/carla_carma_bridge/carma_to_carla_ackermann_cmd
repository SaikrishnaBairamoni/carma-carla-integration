#!/usr/bin/env python

"""
Subscribe from CARMA :autoware_msgs::VehicleCmd
    Topic: /hardware_interface/vehicle_cmd

Publish to CARLA :ackermann_msgs::AckermannDrive
    Topic: /carla/{}/ackermann_cmd
"""
from math import fabs
from os import stat
import rospy
from ackermann_msgs.msg import AckermannDrive
from autoware_msgs.msg import VehicleCmd
from cav_msgs.msg import GuidanceState

pub = None
gs_state = 0
init_status = True
init_cmd = AckermannDrive()

def guidance_state_callback(data):
    """
    callback for guidance state
    """
    global init_status
    global init_cmd
    global gs_state
    gs_state = data.state
    if gs_state == GuidanceState.ENGAGED and init_status:
        init_status = False
        ## providing initial ackermann command to carla virtual vehicle
        init_cmd.speed = 10
        init_cmd.acceleration = 2
        init_cmd.steering_angle = 0
        pub.publish(init_cmd)

def vehicle_cmd_callback(data):
    """
    callback for vehicle cmds
    """

    if gs_state != GuidanceState.ENGAGED:
        return
    else:
        msg = AckermannDrive()
        msg.speed = data.ctrl_cmd.linear_velocity
        msg.acceleration = data.ctrl_cmd.linear_acceleration
        msg.steering_angle = data.ctrl_cmd.steering_angle
        pub.publish(msg)


def vehicle_cmd_to_ackermanndrive():
    """
    mainloop
    """
    global pub
    rospy.init_node('carma_to_carla_vehicle_cmd')
    role_name = rospy.get_param('/role_name', 'ego_vehicle')
    pub = rospy.Publisher('/carla/{}/ackermann_cmd'.format(role_name), AckermannDrive, queue_size=1)
    rospy.Subscriber('/hardware_interface/vehicle_cmd', VehicleCmd, vehicle_cmd_callback, queue_size=1)
    rospy.Subscriber('/guidance/state', GuidanceState, guidance_state_callback, queue_size=1)
    rospy.spin()


if __name__ == '__main__':
    print("carma_to_carla_vehicle_cmd")
    vehicle_cmd_to_ackermanndrive()
