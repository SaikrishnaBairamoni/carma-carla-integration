#!/usr/bin/env python
# Copyright (C) 2021 LEIDOS.
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may not
# use this file except in compliance with the License. You may obtain a copy of
# the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations under
# the License.
#
#
# This file is loosely based on the reference architecture developed by Intel Corporation for Leidos located here
# https://github.com/41623134/carla-autoware/blob/master/catkin_ws/src/carla_autoware_bridge/src/carla_autoware_bridge/carla_to_autoware_vehicle_status
#
# That file has the following license and some code snippets from it may be present in this file as well and are under the same license.
#
# Copyright (c) 2019 Intel Corporation
#
# This work is licensed under the terms of the MIT license.
# For a copy, see <https://opensource.org/licenses/MIT>.
#

"""
Subscribe from CARLA :carla_msgs::CarlaEgoVehicleStatus
    Topic: /carla/{}/vehicle_status

Subscribe from CARLA :carla_msgs::CarlaEgoVehicleInfo
    Topic: /carla/{}/vehicle_info

Publish to CARMA :autoware_msgs::VehicleStatus
    Topic: /hardware_interface/vehicle_status

"""
import math
import rospy
from carla_msgs.msg import CarlaEgoVehicleInfo
from carla_msgs.msg import CarlaEgoVehicleStatus
from autoware_msgs.msg import VehicleStatus, Gear

pub = rospy.Publisher('/hardware_interface/vehicle_status', VehicleStatus, queue_size=1)
vehicle_info = None

max_steering_angle = rospy.get_param('/max_steering_angle', 70)

def vehicle_info_callback(vehicle_info_msg):
    """
    callback for vehicle info
    vehicle_info_msg type:
        carla_msgs::CarlaEgoVehicleInfo
    """
    global vehicle_info
    vehicle_info = vehicle_info_msg

def vehicle_status_callback(vehicle_status_msg):
    """
    callback for vehicle status
    vehicle_status_msg type:
        carla_msgs::CarlaEgoVehicleStatus
    """

    if vehicle_info is None:
        return

    status = VehicleStatus()
    status.header = vehicle_status_msg.header

    # calculate max steering angle
    global max_steering_angle
    max_steering_angle = math.radians(max_steering_angle)

    # get max steering angle (use smallest non-zero value of all wheels)
    for wheel in vehicle_info.wheels:
        if wheel.max_steer_angle and wheel.max_steer_angle < max_steering_angle:
            max_steering_angle = wheel.max_steer_angle

    status.angle = vehicle_status_msg.control.steer * math.degrees(max_steering_angle)
    status.speed = vehicle_status_msg.velocity

    if vehicle_status_msg.control.reverse:
        status.gearshift = Gear.REVERSE
    else:
        status.gearshift = Gear.DRIVE

    if vehicle_status_msg.control.manual_gear_shift:
        status.drivemode = VehicleStatus.MODE_MANUAL
    else:
        status.drivemode = VehicleStatus.MODE_AUTO
    pub.publish(status)


def convert_status_carla_to_autoware():
    """
    main loop
    """
    rospy.init_node('convert_status_carla_to_autoware', anonymous=True)
    role_name = rospy.get_param('/role_name', 'ego_vehicle')
    rospy.Subscriber('/carla/{}/vehicle_status'.format(role_name), CarlaEgoVehicleStatus,
                     vehicle_status_callback)
    rospy.Subscriber('/carla/{}/vehicle_info'.format(role_name), CarlaEgoVehicleInfo,
                     vehicle_info_callback)
    rospy.spin()


if __name__ == '__main__':
    print("carla_to_autoware_vehicle_status")
    convert_status_carla_to_autoware()
