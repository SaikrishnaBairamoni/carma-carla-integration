#!/usr/bin/env python
# Copyright (C) 2021 LEIDOS.
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may not
# use this file except in compliance with the License. You may obtain a copy of
# the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations under
# the License.
#
#
# This file is loosely based on the reference architecture developed by Intel Corporation for Leidos located here
# https://github.com/41623134/carla-autoware/blob/master/catkin_ws/src/carla_autoware_bridge/src/carla_autoware_bridge/carla_to_autoware_detected_objects
#
# That file has the following license and some code snippets from it may be present in this file as well and are under the same license.
#
# Copyright (c) 2018-2019 Intel Corporation
#
# This work is licensed under the terms of the MIT license.
# For a copy, see <https://opensource.org/licenses/MIT>.
#

#sensorlib imports
import sys
sys.path.append('/home/carma/utils/carma-utils/sensorlib')
from src.SensorAPI import SensorAPI
from src.util.SimulatedSensorUtils import SimulatedSensorUtils
import os
import carla


"""
ground truth detections. Publishes the following topics:
    /environment/external_objects  (cav_msgs::ExternalObjectList)
"""
import rospy
import tf

from derived_object_msgs.msg import ObjectArray, Object
from cav_msgs.msg import ExternalObjectList, ExternalObject

external_objects_pub = rospy.Publisher('/environment/external_objects', ExternalObjectList, queue_size=1)


def convert_objects():
    """
    main loop
    """
    rospy.init_node('carla_to_carma_external_objects', anonymous=True)
    sensor_config = SimulatedSensorUtils.load_config_from_file("/home/carma/utils/carma-utils/sensorlib/config/simulated_sensor_config.yaml")
    noise_model_config = SimulatedSensorUtils.load_config_from_file("/home/carma/utils/carma-utils/sensorlib/config/noise_model_config.yaml")

    client = carla.Client('localhost', 2000)
    client.set_timeout(10.0)
    world = client.get_world()
    _infrastructure_id = 1
    _sensor_id = 1
    _detection_cycle_delay_seconds = 0.5

    para_dict = {}
    para_dict['infrastructure_id'] = _infrastructure_id
    para_dict['sensor_id'] = _sensor_id
    para_dict['detection_cycle_delay_seconds'] = _detection_cycle_delay_seconds

    rate = rospy.Rate(10)

    while not rospy.is_shutdown():
        get_data_from_sensorlib(world, para_dict, sensor_config, noise_model_config)
        rate.sleep()


def get_data_from_sensorlib(world, para_dict, sensorConfig, noise_model_config):

    simulated_sensor_config = sensorConfig["simulated_sensor"]
    carla_sensor_config = sensorConfig["lidar_sensor"]
    
    infrastructure_id = para_dict['infrastructure_id']
    sensor_id = para_dict['sensor_id']
    detection_cycle_delay_seconds = para_dict['detection_cycle_delay_seconds']

    api = SensorAPI.build_from_world(world)
    
    user_offset = carla.Location(0, 0, 0)
    lidar_transform = carla.Transform(carla.Location(x=-0.5, z=1.8) + user_offset)

    #default value
    sensor = api.create_simulated_semantic_lidar_sensor(simulated_sensor_config, carla_sensor_config, noise_model_config,
                                                    detection_cycle_delay_seconds,
                                                    infrastructure_id, sensor_id,
                                                    lidar_transform.location, lidar_transform.rotation)


    results = sensor.get_detected_objects()
    objects_msg = ExternalObjectList()

    for object in results:
        object_msg = ExternalObject()
        object_msg.id = object.id
        position_list = object.position.tolist() 
        object_msg.pose.pose.position.x = float(position_list[0])
        object_msg.pose.pose.position.y = float(position_list[1])
        object_msg.pose.pose.position.z = float(position_list[2])
        object_msg.confidence = object.confidence
        velocity_list = object.velocity.tolist()
        object_msg.velocity.twist.linear.x = float(velocity_list[0])
        object_msg.velocity.twist.linear.y = float(velocity_list[1])
        object_msg.velocity.twist.linear.z = float(velocity_list[2])
        #object_msg.object_type = object.object_type
        object_msg.dynamic_obj = 1
        object_msg.presence_vector = object_msg.presence_vector + \
                                 ExternalObject.ID_PRESENCE_VECTOR + \
                                 ExternalObject.POSE_PRESENCE_VECTOR + \
                                 ExternalObject.VELOCITY_PRESENCE_VECTOR + \
                                 ExternalObject.SIZE_PRESENCE_VECTOR + \
                                 ExternalObject.CONFIDENCE_PRESENCE_VECTOR + \
                                 ExternalObject.DYNAMIC_OBJ_PRESENCE + \
                                 ExternalObject.OBJECT_TYPE_PRESENCE_VECTOR
        objects_msg.objects.append(object_msg)

    external_objects_pub.publish(objects_msg)

    

if __name__ == '__main__':
    print("carla_to_carma_external_objects")
    convert_objects()
