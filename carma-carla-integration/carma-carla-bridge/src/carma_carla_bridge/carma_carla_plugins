#!/usr/bin/env python
# Copyright (C) 2021 LEIDOS.
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may not
# use this file except in compliance with the License. You may obtain a copy of
# the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations under
# the License.
#
#
# This file is loosely based on the reference architecture developed by Intel Corporation for Leidos located here
# https://github.com/usdot-fhwa-stol/carma-platform/blob/develop/health_monitor/src/plugin_manager.cpp
#
# That file has the following license and some code snippets from it may be present in this file as well and are under the same license.
#
# Copyright (c) 2018-2019 Intel Corporation
#
# This work is licensed under the terms of the MIT license.
# For a copy, see <https://opensource.org/licenses/MIT>.
#
"""
Call Services from CARMA:
    Service :/guidance/plugins/get_registered_plugins
            :/guidance/plugins/activate_plugin
"""
import rospy
from cav_msgs.msg import Plugin, PluginList, PluginStatus
from cav_srvs.srv import PluginList, PluginActivation

def check_registration_plugin(registered_plugins, plugin_list):
    """
    check registered plugin with plugin list
    plugin_list: selected plugins + required plugins
    registered_plugin: the PluginList in /guidance/plugins/get_registered_plugins ROS service
    """
    registered_plugin_name_list = []
    # pick up the plugin name of plugin from cav_srvs:PluginList to python list
    for registered_plugin in registered_plugins:
        registered_plugin_name_list.append(registered_plugin.name)

    if len(list( set(plugin_list) - set(registered_plugin_name_list) )) > 0:
        rospy.loginfo("Selected plugins/Required plugins can not be found from registered plugins list")
        rospy.loginfo(list( set(plugin_list) - set(registered_plugin_name_list) ))
        return False
    else:
        return True

def initialize():
    """
    main loop
    """
    rospy.init_node("carma_carla_plugins")
    # get selected plugins from carla_carma_bridge parameters
    selected_plugins = rospy.get_param('/selected_plugins')
    required_plugins = rospy.get_param('/required_plugins')

    # concat selected plugins with required plugins and remove duplicate elements if there is a one
    plugin_list = list(set(selected_plugins) - set(required_plugins)) + required_plugins

    # initialize ROS service
    activation_srv = rospy.ServiceProxy("/guidance/plugins/activate_plugin", PluginActivation)
    registered_plugins_serv = rospy.ServiceProxy('/guidance/plugins/get_registered_plugins', PluginList)

    while rospy.is_shutdown() != True:
        # get registered plugins from CARMA platform
        registered_plugins = registered_plugins_serv().plugins

        # check if selected plugins and required plugins are listed in registered plugins
        # if not, sleep loop for a second and recall the registered plugin ROS service for updating
        if check_registration_plugin(registered_plugins, plugin_list):
            for plugin in plugin_list:
                activation = activation_srv(pluginName=plugin, activated=True)
                if activation.newState:
                    rospy.loginfo(str(plugin) + " has been activated")
                else:
                    rospy.logerr(str(plugin) + " not able to be activated.")
            break
        else:
            rospy.sleep(1)


if __name__ == '__main__':
    print("carma_carla_plugins")
    initialize()
